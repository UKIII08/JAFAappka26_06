// File generated by FlutterFire CLI.
// ignore_for_file: type=lint, avoid_classes_with_only_static_members
// ignore_for_file: lines_longer_than_80_chars, avoid_redundant_argument_values

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Before using [DefaultFirebaseOptions.currentPlatform], you must call
/// [DefaultFirebaseOptions.initialize] to load the options from environment variables.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// import 'package:flutter_dotenv/flutter_dotenv.dart'; // Potrzebne do ładowania .env
/// // ...
/// await dotenv.load(fileName: ".env"); // Załaduj .env w main()
/// await DefaultFirebaseOptions.initialize(); // Zainicjuj opcje Firebase
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static late FirebaseOptions android;
  static late FirebaseOptions ios;
  // Możesz dodać inne platformy w podobny sposób, jeśli są potrzebne
  // static late FirebaseOptions macos;
  // static late FirebaseOptions web;

  /// Initializes Firebase options from environment variables.
  ///
  /// This method MUST be called after `await dotenv.load()` and before
  /// accessing `DefaultFirebaseOptions.currentPlatform`.
  static Future<void> initialize() async {
    // Upewnij się, że zmienne środowiskowe zostały załadowane
    // np. przez `await dotenv.load(fileName: ".env");` w Twoim pliku main.dart
    // przed wywołaniem tej metody.

    final androidApiKey = dotenv.env['ANDROID_API_KEY'];
    final androidAppId = dotenv.env['ANDROID_APP_ID'];
    final androidMessagingSenderId = dotenv.env['ANDROID_MESSAGING_SENDER_ID'];
    final androidProjectId = dotenv.env['ANDROID_PROJECT_ID'];
    final androidStorageBucket = dotenv.env['ANDROID_STORAGE_BUCKET'];

    if (androidApiKey == null ||
        androidAppId == null ||
        androidMessagingSenderId == null ||
        androidProjectId == null) {
      throw Exception(
          'One or more Android Firebase environment variables are not set in .env file');
    }

    android = FirebaseOptions(
      apiKey: androidApiKey,
      appId: androidAppId,
      messagingSenderId: androidMessagingSenderId,
      projectId: androidProjectId,
      storageBucket: androidStorageBucket, // storageBucket może być null
    );

    final iosApiKey = dotenv.env['IOS_API_KEY'];
    final iosAppId = dotenv.env['IOS_APP_ID'];
    final iosMessagingSenderId = dotenv.env['IOS_MESSAGING_SENDER_ID'];
    final iosProjectId = dotenv.env['IOS_PROJECT_ID'];
    final iosStorageBucket = dotenv.env['IOS_STORAGE_BUCKET'];
    final iosBundleId = dotenv.env['IOS_BUNDLE_ID'];

    if (iosApiKey == null ||
        iosAppId == null ||
        iosMessagingSenderId == null ||
        iosProjectId == null) {
      throw Exception(
          'One or more iOS Firebase environment variables are not set in .env file');
    }

    ios = FirebaseOptions(
      apiKey: iosApiKey,
      appId: iosAppId,
      messagingSenderId: iosMessagingSenderId,
      projectId: iosProjectId,
      storageBucket: iosStorageBucket, // storageBucket może być null
      iosBundleId: iosBundleId, // iosBundleId może być null
    );

    // Przykład dla Web (jeśli jest potrzebne i skonfigurowane w .env)
    // final webApiKey = dotenv.env['WEB_API_KEY'];
    // if (kIsWeb && webApiKey != null) { // Sprawdź czy konfiguracja web istnieje
    //   web = FirebaseOptions(
    //     apiKey: webApiKey,
    //     appId: dotenv.env['WEB_APP_ID']!,
    //     messagingSenderId: dotenv.env['WEB_MESSAGING_SENDER_ID']!,
    //     projectId: dotenv.env['WEB_PROJECT_ID']!,
    //     authDomain: dotenv.env['WEB_AUTH_DOMAIN'],
    //     storageBucket: dotenv.env['WEB_STORAGE_BUCKET'],
    //     measurementId: dotenv.env['WEB_MEASUREMENT_ID'],
    //   );
    // }
  }

  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      // Jeśli wspierasz web i zainicjowałeś 'web' w metodzie initialize():
      // if (dotenv.env['WEB_API_KEY'] != null) return web; // Odkomentuj jeśli używasz web
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again, '
        'or manually configure it by adding WEB_ variables to .env and firebase_options.dart',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        // Jeśli wspierasz macOS i zainicjowałeś 'macos' w metodzie initialize():
        // if (dotenv.env['MACOS_API_KEY'] != null) return macos; // Przykład
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again, '
          'or manually configure it by adding MACOS_ variables to .env and firebase_options.dart',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again, '
          'or manually configure it by adding WINDOWS_ variables to .env and firebase_options.dart',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again, '
          'or manually configure it by adding LINUX_ variables to .env and firebase_options.dart',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}